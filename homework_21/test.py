import homework_21.infrastructure as infra
from homework_21.request_response_bodies import all_objects, new_object, update_reserved_odj_with, update_not_reserved_odj_with


def test_get_list_of_all_objects():
    response = infra.get_all_objects()
    assert response.json() == all_objects


def test_get_list_of_all_objects_status():
    response = infra.get_all_objects()
    assert response.status_code == 200


def test_count_all_objects():
    response = infra.get_all_objects()
    objects = response.json()
    unique_ids = {object['id'] for object in objects}
    count_all_ids = len(unique_ids)
    assert count_all_ids == 13


def test_get_object_using_invalid_id():
    response = infra.get_an_object_by_id(50)
    assert response.status_code == 404


def test_create_object_status_code():
    response = infra.create_a_new_object(new_object)
    assert response.status_code == 200
    print(response.json())

# Такого юзкейсу в нас нема, але система дає змогу створити пустий об'єкт з наступним json
# {
#     "id": "ff8081818ad150c5018af9ad523723e2",
#     "name": null,
#     "createdAt": "2023-10-04T07:53:20.183+00:00",
#     "data": null
# }
# Тому можна вважати, що тест пройшов
def test_create_object_with_empty_body():
    response = infra.create_a_new_object({})
    assert response.status_code == 200


# Система дозволяє створювати однакові об'єкти
def test_create_the_same_object():
    response1 = infra.create_a_new_object(new_object)
    response2 = infra.create_a_new_object(new_object)
    assert response1.status_code == 200
    assert response2.status_code == 200
    print(response1.json())
    print(response2.json())
    print(response1 is response2)


def test_created_object_name():
    response = infra.create_a_new_object(new_object)
    assert response.json()['name'] == 'Dell'


def test_update_existing_reserved_object():
    response = infra.update_an_object('1', update_reserved_odj_with)
    error = {"error": "1 is a reserved id and the data object of it cannot be overridden. You can create a new object via POST request and use new generated by id from it to send a PUT request."
}
    assert response.json() == error


def test_update_existing_not_reserved_object():
    response = infra.update_an_object('ff8081818ad150c5018afaad17312602', update_not_reserved_odj_with)
    assert response.status_code == 200


def test_update_existing_object_with_empty_body():
    response = infra.update_an_object('ff8081818ad150c5018afaad17312602', {})
    assert response.status_code == 200


def test_update_existing_object_with_one_value():
    response = infra.update_an_object('ff8081818ad150c5018afaad17312602', {'name':'Huawei'})
    assert response.json()['name'] == 'Huawei'
    assert response.json()['data'] is None
    print(response.json())


def test_delete_reserved_object():
    deleted_obj = infra.delete_an_object('1')
    assert deleted_obj.status_code == 405


def test_delete_reserved_odj_receive_error():
    response = infra.delete_an_object('1')
    error = {"error": "1 is a reserved id and the data object of it cannot be deleted. You can create your own new object via POST request and try to send a DELETE request with new generated object id."
}
    assert response.json() == error


def test_delete_just_created_obj():
    response = infra.create_a_new_object(new_object)
    deleted_obj = infra.delete_an_object(response.json()['id'])
    assert deleted_obj.status_code == 200


def test_not_existing_object():
    response = infra.delete_an_object('100')
    assert response.status_code == 404